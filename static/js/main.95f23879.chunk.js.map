{"version":3,"sources":["reducer/TaskReducer.js","context/TaskContext.js","components/Navbar.js","components/tasks/AddTask.js","components/tasks/TaskList.js","components/TodoList.js","App.js","index.js"],"names":["Action","taskReducer","state","action","type","task","map","item","id","isChecked","filter","TaskContext","createContext","TaskContextProvider","props","useReducer","tasks","dispatch","Provider","value","children","Navbar","useContext","console","log","length","AddTask","useState","description","setDescription","onSubmit","e","preventDefault","nanoid","created","Date","placeholder","required","onChange","target","TaskList","onClick","className","toDateString","TodoList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAIaA,EACD,WADCA,EAEC,aAFDA,EAGE,cAGFC,EAAc,SAACC,EAAOC,GAIjC,OAAQA,EAAOC,MACb,KAAKJ,EACH,MAAM,GAAN,mBAAWE,GAAX,CAAkBC,EAAOE,OAK3B,KAAKL,EAYH,OAAOE,EAAMI,KAAI,SAACC,GAIhB,OAHIA,EAAKC,KAAOL,EAAOE,KAAKG,KAC1BD,EAAKE,UAAYN,EAAOE,KAAKI,WAExBF,KAKX,KAAKP,EACH,OAAOE,EAAMQ,QAAO,SAACL,GAAD,OAAUA,EAAKG,KAAOL,EAAOK,MAEnD,QACE,OAAON,I,OCxCAS,EAAcC,0BAYZC,EAVa,SAACC,GAAW,IAAD,EACXC,qBAAWd,EAAa,IADb,mBAC9Be,EAD8B,KACvBC,EADuB,KAGrC,OACE,cAACN,EAAYO,SAAb,CAAsBC,MAAO,CAAEH,QAAOC,YAAtC,SACGH,EAAMM,YCVAC,EAAS,WAAO,IACnBL,EAAUM,qBAAWX,GAArBK,MAER,OADAO,QAAQC,IAAI,QAASR,GAEnB,mCACE,yCAAYA,EAAMS,OAAlB,U,OCHOC,EAAU,WAAO,IACpBT,EAAaK,qBAAWX,GAAxBM,SADmB,EAEWU,mBAAS,IAFpB,mBAEpBC,EAFoB,KAEPC,EAFO,KAoB3B,OACE,sBAAMC,SAhBa,SAACC,GACpBA,EAAEC,iBACFf,EAAS,CACPb,KAAMJ,EACNK,KAAM,CACJG,GAAIyB,YAAO,GACXxB,WAAW,EACXyB,QAAS,IAAIC,KACbP,YAAaA,KAIjBC,EAAe,KAIf,SACE,uBACEzB,KAAK,OACLe,MAAOS,EACPQ,YAAY,kCACZC,UAAQ,EACRC,SAAU,SAACP,GAAD,OAAOF,EAAeE,EAAEQ,OAAOpB,aC5BpCqB,EAAW,WAAO,IAAD,EACAlB,qBAAWX,GAA/BK,EADoB,EACpBA,MAAOC,EADa,EACbA,SAoBf,OACE,+BACoB,IAAjBD,EAAMS,QAAgB,0CACtBT,EAAMV,KAAI,SAACD,GACV,OACE,qBAEEoC,QAAS,kBAzBIjC,EAyBgBH,EAAKG,GAzBjBC,GAyBsBJ,EAAKI,eAvBpDQ,EAAS,CACPb,KAAMJ,EACNK,KAAM,CACJG,KACAC,eANgB,IAACD,EAAIC,GA0BjBiC,UAAWrC,EAAKI,UAAY,UAAY,GAH1C,UAKE,sBAAKiC,UAAU,mBAAf,UACE,+BAAOrC,EAAKuB,cACZ,gCAAQvB,EAAK6B,QAAQS,oBAEvB,wBAAQF,QAAS,kBArBLjC,EAqBwBH,EAAKG,QApBjDS,EAAS,CACPb,KAAMJ,EACNQ,GAAIA,IAHa,IAACA,GAqBZ,sBARKH,EAAKG,WCzBToC,EAAW,WACtB,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCSSC,MAdf,WACE,OACE,iCACE,2CACW,+DAEX,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,WCRRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.95f23879.chunk.js","sourcesContent":["/**\n * Reducers:\n * Utilizaremos 3 acciones para trabajar con nuestro TODOLIST\n */\nexport const Action = {\n  ADD_TASK: 'add-task',\n  CHECK_TASK: 'check-task',\n  REMOVE_TASK: 'remove-task',\n};\n\nexport const taskReducer = (state, action) => {\n  /**\n   * Aqui atraves de un switch seleccionaremos el tipo de accion que definimos y la tarea a realizar en cada una\n   */\n  switch (action.type) {\n    case Action.ADD_TASK: {\n      return [...state, action.task];\n    }\n    /**\n     * Este caso es particular, ya que necesitamos cambiar una tarea especifica dentro del array, para ello utilizaremos el id del task\n     */\n    case Action.CHECK_TASK: {\n      //const index = state.find(item => item.id === action.task.id)\n      // solve with find()\n      /*return state.find((item) => {\n        if (item.id === action.task.id) {\n          item.isCheked = action.task.isChecked;\n          return true;\n        }\n        return false;\n      });\n      */\n      // solve with map()\n      return state.map((item) => {\n        if (item.id === action.task.id) {\n          item.isChecked = action.task.isChecked;\n        }\n        return item;\n      });\n      //const taskIndex = state.findIndex\n      // return;\n    }\n    case Action.REMOVE_TASK: {\n      return state.filter((task) => task.id !== action.id);\n    }\n    default:\n      return state;\n  }\n};\n","import { createContext, useReducer } from 'react';\nimport { taskReducer } from '../reducer/TaskReducer';\n/*\nEl Context, provee un camino para pasar datos mediante el arbol de componentes de react, sin tener que pasar props manualmente en cada nivel\n*/\n\nexport const TaskContext = createContext();\n\nconst TaskContextProvider = (props) => {\n  const [tasks, dispatch] = useReducer(taskReducer, []);\n\n  return (\n    <TaskContext.Provider value={{ tasks, dispatch }}>\n      {props.children}\n    </TaskContext.Provider>\n  );\n};\n\nexport default TaskContextProvider;\n","import { useContext } from 'react';\nimport { TaskContext } from '../context/TaskContext';\n\nexport const Navbar = () => {\n  const { tasks } = useContext(TaskContext);\n  console.log('tasks', tasks);\n  return (\n    <>\n      <h2>Tasks ({tasks.length})</h2>\n    </>\n  );\n};\n","import { useContext, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { TaskContext } from '../../context/TaskContext';\nimport { Action } from '../../reducer/TaskReducer';\n\nexport const AddTask = () => {\n  const { dispatch } = useContext(TaskContext);\n  const [description, setDescription] = useState('');\n\n  // procesar el formulario\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch({\n      type: Action.ADD_TASK,\n      task: {\n        id: nanoid(8),\n        isChecked: false,\n        created: new Date(),\n        description: description,\n      },\n    });\n    // vaciamos el estado\n    setDescription('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={description}\n        placeholder=\"...write new task and hit ENTER\"\n        required\n        onChange={(e) => setDescription(e.target.value)}\n      />\n    </form>\n  );\n};\n","import { useContext } from 'react';\nimport { TaskContext } from '../../context/TaskContext';\nimport { Action } from '../../reducer/TaskReducer';\n\nexport const TaskList = () => {\n  const { tasks, dispatch } = useContext(TaskContext);\n\n  const handleChecked = (id, isChecked) => {\n    //console.log(id, !isChecked);\n    dispatch({\n      type: Action.CHECK_TASK,\n      task: {\n        id,\n        isChecked,\n      },\n    });\n  };\n\n  const handleDelete = (id) => {\n    dispatch({\n      type: Action.REMOVE_TASK,\n      id: id,\n    });\n  };\n\n  return (\n    <ul>\n      {tasks.length === 0 && <h4>No tasks</h4>}\n      {tasks.map((task) => {\n        return (\n          <li\n            key={task.id}\n            onClick={() => handleChecked(task.id, !task.isChecked)}\n            className={task.isChecked ? 'checked' : ''}\n          >\n            <div className=\"task-description\">\n              <span>{task.description}</span>\n              <small>{task.created.toDateString()}</small>\n            </div>\n            <button onClick={() => handleDelete(task.id)}>Delete</button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import { AddTask } from './tasks/AddTask';\nimport { TaskList } from './tasks/TaskList';\n\n/**\n * Aqui combinaremos AddTask y TaskList\n */\nexport const TodoList = () => {\n  return (\n    <>\n      <AddTask />\n      <TaskList />\n    </>\n  );\n};\n","import './App.css';\nimport { Navbar } from './components/Navbar';\nimport { TodoList } from './components/TodoList';\nimport TaskContextProvider from './context/TaskContext';\n\nfunction App() {\n  return (\n    <main>\n      <h1>\n        TodoList <span>with Api Context ReactJS</span>\n      </h1>\n      <TaskContextProvider>\n        <Navbar />\n        <TodoList />\n      </TaskContextProvider>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}